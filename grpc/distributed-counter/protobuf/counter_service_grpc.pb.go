// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protobuf/counter_service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedCounterServiceClient is the client API for DistributedCounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedCounterServiceClient interface {
	// Increment the counter value by 1 and return its value after such operation.
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*Counter, error)
	// Decrement the counter value by 1 and return its value after such operation.
	Decrement(ctx context.Context, in *DecrementRequest, opts ...grpc.CallOption) (*Counter, error)
	// Return the counter value.
	GetCounter(ctx context.Context, in *GetCounterRequest, opts ...grpc.CallOption) (*Counter, error)
}

type distributedCounterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedCounterServiceClient(cc grpc.ClientConnInterface) DistributedCounterServiceClient {
	return &distributedCounterServiceClient{cc}
}

func (c *distributedCounterServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/DistributedCounterService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedCounterServiceClient) Decrement(ctx context.Context, in *DecrementRequest, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/DistributedCounterService/Decrement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedCounterServiceClient) GetCounter(ctx context.Context, in *GetCounterRequest, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/DistributedCounterService/GetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedCounterServiceServer is the server API for DistributedCounterService service.
// All implementations must embed UnimplementedDistributedCounterServiceServer
// for forward compatibility
type DistributedCounterServiceServer interface {
	// Increment the counter value by 1 and return its value after such operation.
	Increment(context.Context, *IncrementRequest) (*Counter, error)
	// Decrement the counter value by 1 and return its value after such operation.
	Decrement(context.Context, *DecrementRequest) (*Counter, error)
	// Return the counter value.
	GetCounter(context.Context, *GetCounterRequest) (*Counter, error)
	mustEmbedUnimplementedDistributedCounterServiceServer()
}

// UnimplementedDistributedCounterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedCounterServiceServer struct {
}

func (UnimplementedDistributedCounterServiceServer) Increment(context.Context, *IncrementRequest) (*Counter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedDistributedCounterServiceServer) Decrement(context.Context, *DecrementRequest) (*Counter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrement not implemented")
}
func (UnimplementedDistributedCounterServiceServer) GetCounter(context.Context, *GetCounterRequest) (*Counter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounter not implemented")
}
func (UnimplementedDistributedCounterServiceServer) mustEmbedUnimplementedDistributedCounterServiceServer() {
}

// UnsafeDistributedCounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedCounterServiceServer will
// result in compilation errors.
type UnsafeDistributedCounterServiceServer interface {
	mustEmbedUnimplementedDistributedCounterServiceServer()
}

func RegisterDistributedCounterServiceServer(s grpc.ServiceRegistrar, srv DistributedCounterServiceServer) {
	s.RegisterService(&DistributedCounterService_ServiceDesc, srv)
}

func _DistributedCounterService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedCounterServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedCounterService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedCounterServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedCounterService_Decrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedCounterServiceServer).Decrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedCounterService/Decrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedCounterServiceServer).Decrement(ctx, req.(*DecrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedCounterService_GetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedCounterServiceServer).GetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedCounterService/GetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedCounterServiceServer).GetCounter(ctx, req.(*GetCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedCounterService_ServiceDesc is the grpc.ServiceDesc for DistributedCounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedCounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributedCounterService",
	HandlerType: (*DistributedCounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _DistributedCounterService_Increment_Handler,
		},
		{
			MethodName: "Decrement",
			Handler:    _DistributedCounterService_Decrement_Handler,
		},
		{
			MethodName: "GetCounter",
			Handler:    _DistributedCounterService_GetCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/counter_service.proto",
}
